# Generated by Django 2.1 on 2018-09-28 02:12

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='acquisition_chromatography',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mobile_phase_a', models.FloatField()),
                ('mobile_phase_b', models.FloatField()),
                ('sample_injection_volume', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='acquisition_hrms',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sourceName', models.TextField()),
                ('mode', models.TextField()),
                ('ionisation', models.TextField()),
                ('Voltage', models.IntegerField()),
                ('SourceGas1', models.IntegerField()),
                ('SourceGas2', models.IntegerField()),
                ('CurtainGas', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='analytical_column',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.TextField()),
                ('brand', models.TextField()),
                ('time_last_used', models.DateTimeField()),
                ('phase', models.IntegerField()),
                ('particle_size', models.FloatField()),
                ('length', models.IntegerField()),
                ('pore_size', models.IntegerField()),
                ('inner_diameter', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='chrom_time',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chrom_events', models.IntegerField()),
                ('event_stage', models.IntegerField()),
                ('over_temp', models.FloatField()),
                ('AB', models.FloatField()),
                ('gradient_AB', models.FloatField()),
                ('flow_rate', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='chromatography',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brandName', models.TextField()),
                ('modelName', models.TextField()),
                ('time_last_used', models.DateTimeField()),
                ('component_type', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='hrms_system',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brandName', models.TextField()),
                ('modelName', models.TextField()),
            ],
        ),
        migrations.AddField(
            model_name='acquisition_hrms',
            name='hrms_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='systemsdb.hrms_system'),
        ),
        migrations.AddField(
            model_name='acquisition_chromatography',
            name='chrom_events',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='systemsdb.chrom_time'),
        ),
        migrations.AddField(
            model_name='acquisition_chromatography',
            name='chroma_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='systemsdb.chromatography'),
        ),
        migrations.AddField(
            model_name='acquisition_chromatography',
            name='column_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='systemsdb.analytical_column'),
        ),
    ]
